import os
import numpy as np
import netCDF4 as nc
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.lines as mlines
import matplotlib.colors as mcolors
from scipy.stats import pearsonr
import matplotlib.patches as patches
from mpl_toolkits.axes_grid1.inset_locator import inset_axes
from matplotlib import gridspec
import scipy.stats as stats

models = ['ACCESS-CM2','AWI-CM-1-1-MR','CanESM5','CESM2-WACCM','CESM2','CMCC-CM2-SR5','CMCC-ESM2','CNRM-CM6-1','CNRM-ESM2-1','EC-Earth3','FGOALS-g3','INM-CM5-0','IPSL-CM6A-LR','MIROC6','MIROC-ES2L','MPI-ESM1-2-LR','MRI-ESM2-0','NorESM2-LM','UKESM1-0-LL']
ll_t = [1000, 925, 850, 700, 600, 500, 400, 300, 250, 200, 150, 100, 70, 50]
ll_w = [1000, 850, 700, 500, 250, 100, 50]
y = [1000, 950, 900, 850, 800, 750, 700, 650, 600, 550, 500, 450, 400, 350, 300, 250, 200, 150, 100, 50]

#Read data for ERA5
ERA5_tmean_JFM = np.zeros((len(y)))
ERA5_gmean_JFM = np.zeros((len(y)))
ERA5_wmean_JFM = np.zeros((len(y)))
ERA5_ttrend_JFM = np.zeros((len(y)))
ERA5_gtrend_JFM = np.zeros((len(y)))
ERA5_wrel_trend_JFM = np.zeros((len(y)))
ERA5_tmean_JAS = np.zeros((len(y)))
ERA5_gmean_JAS = np.zeros((len(y)))
ERA5_wmean_JAS = np.zeros((len(y)))
ERA5_ttrend_JAS = np.zeros((len(y)))
ERA5_gtrend_JAS = np.zeros((len(y)))
ERA5_wrel_trend_JAS = np.zeros((len(y)))

ERA5_tmean_JFM = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=2, delimiter=',', max_rows=1)
ERA5_tmean_JAS = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=3, delimiter=',', max_rows=1)
ERA5_gmean_JFM = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=5, delimiter=',', max_rows=1)
ERA5_gmean_JAS = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=6, delimiter=',', max_rows=1)
ERA5_wmean_JFM = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=8, delimiter=',', max_rows=1)
ERA5_wmean_JAS = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=9, delimiter=',', max_rows=1)

ERA5_ttrend_JFM = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=11, delimiter=',', max_rows=1)
ERA5_ttrend_JAS = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=12, delimiter=',', max_rows=1)
ERA5_gtrend_JFM = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=14, delimiter=',', max_rows=1)
ERA5_gtrend_JAS = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=15, delimiter=',', max_rows=1)
ERA5_wrel_trend_JFM = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=17, delimiter=',', max_rows=1)
ERA5_wrel_trend_JAS = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=18, delimiter=',', max_rows=1)

#Read data for CMIP6 models
CMIP6_tmean_JFM = np.zeros((len(models),len(ll_t)))
CMIP6_gmean_JFM = np.zeros((len(models),len(ll_t)))
CMIP6_wmean_JFM = np.zeros((len(models),len(ll_w)))
CMIP6_tmean_JAS = np.zeros((len(models),len(ll_t)))
CMIP6_gmean_JAS = np.zeros((len(models),len(ll_t)))
CMIP6_wmean_JAS = np.zeros((len(models),len(ll_w)))
CMIP6_ttrend_JFM = np.zeros((2,len(models),len(ll_t)))
CMIP6_ttrend_JAS = np.zeros((2,len(models),len(ll_t)))
CMIP6_gtrend_JFM = np.zeros((2,len(models),len(ll_t)))
CMIP6_gtrend_JAS = np.zeros((2,len(models),len(ll_t)))
CMIP6_wrel_trend_JFM = np.zeros((2,len(models),len(ll_w)))
CMIP6_wrel_trend_JAS = np.zeros((2,len(models),len(ll_w)))

for i in range(len(models)):
    CMIP6_tmean_JFM[i] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=22+i, delimiter=',', max_rows=1)
    CMIP6_gmean_JFM[i] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=42+i, delimiter=',', max_rows=1)
    CMIP6_wmean_JFM[i] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=62+i, delimiter=',', max_rows=1)
    CMIP6_tmean_JAS[i] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=82+i, delimiter=',', max_rows=1)
    CMIP6_gmean_JAS[i] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=102+i, delimiter=',', max_rows=1)
    CMIP6_wmean_JAS[i] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=122+i, delimiter=',', max_rows=1)
    CMIP6_ttrend_JFM[0,i] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=142+i, delimiter=',', max_rows=1)
    CMIP6_ttrend_JFM[1,i] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=162+i, delimiter=',', max_rows=1)
    CMIP6_gtrend_JFM[0,i] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=182+i, delimiter=',', max_rows=1)
    CMIP6_gtrend_JFM[1,i] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=202+i, delimiter=',', max_rows=1)
    CMIP6_wrel_trend_JFM[0,i] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=222+i, delimiter=',', max_rows=1)
    CMIP6_wrel_trend_JFM[1,i] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=242+i, delimiter=',', max_rows=1)
    CMIP6_ttrend_JAS[0,i] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=262+i, delimiter=',', max_rows=1)
    CMIP6_ttrend_JAS[1,i] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=282+i, delimiter=',', max_rows=1)
    CMIP6_gtrend_JAS[0,i] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=302+i, delimiter=',', max_rows=1)
    CMIP6_gtrend_JAS[1,i] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=322+i, delimiter=',', max_rows=1)
    CMIP6_wrel_trend_JAS[0,i] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=342+i, delimiter=',', max_rows=1)
    CMIP6_wrel_trend_JAS[1,i] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=362+i, delimiter=',', max_rows=1)
    
#Read data for CMIP6 multi-models mean
ENS_ttrend_JFM = np.zeros((2,len(ll_t)))
ENS_gtrend_JFM = np.zeros((2,len(ll_t)))
ENS_wrel_trend_JFM = np.zeros((2,len(ll_w)))
ENS_ttrend_JAS = np.zeros((2,len(ll_t)))
ENS_gtrend_JAS = np.zeros((2,len(ll_t)))
ENS_wrel_trend_JAS = np.zeros((2,len(ll_w)))

ENS_ttrend_JFM[0] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=383, delimiter=',', max_rows=1)
ENS_ttrend_JAS[0] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=384, delimiter=',', max_rows=1)
ENS_ttrend_JFM[1] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=386, delimiter=',', max_rows=1)
ENS_ttrend_JAS[1] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=387, delimiter=',', max_rows=1)
ENS_gtrend_JFM[0] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=389, delimiter=',', max_rows=1)
ENS_gtrend_JAS[0] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=390, delimiter=',', max_rows=1)
ENS_gtrend_JFM[1] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=392, delimiter=',', max_rows=1)
ENS_gtrend_JAS[1] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=393, delimiter=',', max_rows=1)
ENS_wrel_trend_JFM[0] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=395, delimiter=',', max_rows=1)
ENS_wrel_trend_JAS[0] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=396, delimiter=',', max_rows=1)
ENS_wrel_trend_JFM[1] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=398, delimiter=',', max_rows=1)
ENS_wrel_trend_JAS[1] = np.loadtxt('Figure2_SupplFigure6.txt', skiprows=399, delimiter=',', max_rows=1)


#Plots
colors = ['#648FFF', '#785EF0', '#DC267F', '#FE6100', '#FFB000', '#648FFF', '#785EF0', '#DC267F', '#FE6100', '#FFB000', '#648FFF', '#785EF0', '#DC267F', '#FE6100', '#FFB000', '#648FFF', '#785EF0', '#DC267F', '#FE6100', '#FFB000']
linestyles = ['-', '--', ':', '-.', '-', '--', ':', '-.', '-', '--', ':', '-.', '-', '--', ':', '-.', '-', '--', ':', '-.']
x = np.zeros((20))
line_850hpa = 850

height = ['1', '5', '10'] #Km
h2p_w = [887.5442025,  507.42980169, 234.44761072] #pressure values at given heights for winter
h2p_s = [890.10933325, 523.18174866, 248.63849736] #pressure values at given heights for summer

#Figure2#
fig = plt.figure(figsize=(10,15))

    #Temperature trend 1950-2020#
ax1 = fig.add_subplot(3,2,1)
ax1.plot(x,y, color='gray', linewidth=1, alpha=0.5)
ax1.set_prop_cycle(color = colors, linestyle = linestyles)
ax1.axhline(line_850hpa, color='gray', linewidth=1, alpha=0.5)
for model in range(len(models)):
    ax1.plot(CMIP6_ttrend_JFM[0,model],ll_t)
ax1.plot(ERA5_ttrend_JFM,y, color='k', linestyle='-', linewidth=3)
ax1.plot(ENS_ttrend_JFM[0,:9],ll_t[:9], color='k', linestyle='--', linewidth=2)
ax1.plot([0.07544423, 0.0418263],[250,225], color='k', linestyle='--', linewidth=2)
ax1.plot([0.0418263, 0.00820837],[225,200], color='gray', linestyle='--', linewidth=2)
plt.ylim([1000,200])
plt.xlim([-0.5,2.5])
plt.yticks([1000,900,800,700,600,500,400,300,200],['2m', '900', '800', '700', '600', '500', '400', '300', '200'])
ax1.set_ylabel('Pressure levels (hPa)')
ax1.set_xlabel('Temperature trend (K dec$^{-1}$)')
ax = ax1.twinx()
plt.minorticks_off()
ax.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())
plt.ylim([1000,200])
plt.yticks(h2p_w, [])
plt.title('1950-2020')
plt.text(0.99, 0.99, 'a', ha='right', va='top', transform=plt.gca().transAxes, fontweight='bold')

    #Temperature mean 1950-2020#
axins = inset_axes(ax1, width="100%", height="100%", bbox_to_anchor=(.50, .34, .45, .60), bbox_transform=ax1.transAxes)
axins.set_prop_cycle(color = colors, linestyle = linestyles)
axins.axhline(line_850hpa, color='gray', linewidth=1, alpha=0.5)
for model in range(len(models)):
    axins.plot(CMIP6_tmean_JFM[model],ll_t)
axins.plot(ERA5_tmean_JFM,y, color='k', linestyle='-', linewidth=2)
plt.xlim([200,260])
plt.ylim([1000,200])
plt.yticks([1000,900,800,700,600,500,400,300,200],[])
axins.set_xlabel('Mean temperature (K)', fontsize=6)
axins.set_xticks([200,210,220,230,240,250,260],[200,210,220,230,240,250,260], fontsize=6)
plt.text(0.98, 0.99, 'g', ha='right', va='top', transform=plt.gca().transAxes, fontweight='bold')
axins2 = axins.twinx()
axins2.minorticks_off()
axins2.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())
axins2.set_ylim([1000,200])
axins2.set_yticks(h2p_w, [])

    #Temperature trend 1950-2100#
ax2 = fig.add_subplot(3,2,2)
ax2.plot(x,y, color='gray', linewidth=1, alpha=0.5)
ax2.set_prop_cycle(color = colors, linestyle = linestyles)
ax2.axhline(line_850hpa, color='gray', linewidth=1, alpha=0.5)
for model in range(len(models)):
    ax2.plot(CMIP6_ttrend_JFM[1,model],ll_t)
ax2.plot(ENS_ttrend_JFM[1,:9],ll_t[:9], color='k', linestyle='--', linewidth=2)
ax2.plot([0.11981707, 0.05664139],[250,225], color='k', linestyle='--', linewidth=2)
ax2.plot([0.05664139, -0.00653429],[225,200], color='gray', linestyle='--', linewidth=2)
plt.ylim([1000,200])
plt.xlim([-0.5,2.5])
plt.yticks([1000,900,800,700,600,500,400,300,200],[])
ax2.set_xlabel('Temperature trend (K dec$^{-1}$)')
ax = ax2.twinx()
plt.minorticks_off()
ax.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())
plt.ylim([1000,200])
plt.yticks(h2p_w, height, fontsize=8)
plt.ylabel('Height (Km)', fontsize=8)
plt.title('1950-2100')
plt.text(0.99, 0.99, 'b', ha='right', va='top', transform=plt.gca().transAxes, fontweight='bold')

    #Temperature gradient trend 1950-2020#
ax3 = fig.add_subplot(3,2,3)
ax3.plot(x,y, color='gray', linewidth=1, alpha=0.5)
ax3.set_prop_cycle(color = colors, linestyle = linestyles )
ax3.axhline(line_850hpa, color='gray', linewidth=1, alpha=0.5)
for model in range(len(models)):
    ax3.plot(CMIP6_gtrend_JFM[0,model],ll_t, label=models[model])
ax3.plot(ERA5_gtrend_JFM,y, color='k', linestyle='-', linewidth=3, label='ERA5')
ax3.plot(ENS_gtrend_JFM[0,:10],ll_t[:10], color='k', linestyle='--', linewidth=2)
plt.ylim([1000,200])
plt.xlim([-0.7,0.1])
plt.yticks([1000,900,800,700,600,500,400,300,200],['2m', '900', '800', '700', '600', '500', '400', '300','200'])
ax3.set_ylabel('Pressure levels (hPa)')
ax3.set_xlabel('Temperature gradient trend (K/50hPa dec$^{-1}$)')
ax = ax3.twinx()
plt.minorticks_off()
ax.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())
plt.ylim([1000,200])
plt.yticks(h2p_w, [])
plt.text(0.99, 0.99, 'c', ha='right', va='top', transform=plt.gca().transAxes, fontweight='bold')

    #Temperature gradient mean 1950-2020#
axins = inset_axes(ax3, width="100%", height="100%", bbox_to_anchor=(.085, .34, .45, .60), bbox_transform=ax3.transAxes)
axins.plot(x,y, color='gray', linewidth=1, alpha=0.5)
axins.set_prop_cycle(color = colors, linestyle = linestyles)
axins.axhline(line_850hpa, color='gray', linewidth=1, alpha=0.5)
for model in range(len(models)):
    axins.plot(CMIP6_gmean_JFM[model],ll_t)
axins.plot(ERA5_gmean_JFM,y, color='k', linestyle='-', linewidth=2)
plt.xlim([-7,8])
plt.ylim([1000,200])
plt.yticks([1000,900,800,700,600,500,400,300,200],[])
axins.set_xlabel('Mean temperature gradient (K/50hPa)', fontsize=6)
axins.set_xticks([-6,-4,-2,0,2,4,6,8],[-6,-4,-2,0,2,4,6,8], fontsize=6)
plt.text(0.98, 0.99, 'h', ha='right', va='top', transform=plt.gca().transAxes, fontweight='bold')
axins2 = axins.twinx()
axins2.minorticks_off()
axins2.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())
axins2.set_ylim([1000,200])
axins2.set_yticks(h2p_w, [])

    #Temperature gradient trend 1950-2100#
ax4 = fig.add_subplot(3,2,4)
ax4.plot(x,y, color='gray', linewidth=1, alpha=0.5)
ax4.set_prop_cycle(color = colors, linestyle = linestyles)
ax4.axhline(line_850hpa, color='gray', linewidth=1, alpha=0.5)
for model in range(len(models)):
    ax4.plot(CMIP6_gtrend_JFM[1,model],ll_t)
ax4.plot(ENS_gtrend_JFM[1,:10],ll_t[:10], color='k', linestyle='--', linewidth=2)
plt.ylim([1000,200])
plt.xlim([-0.7,0.1])
plt.yticks([1000,900,800,700,600,500,400,300,200],[])
ax4.set_xlabel('Temperature gradient trend (K/50hPa dec$^{-1}$)')
ax = ax4.twinx()
plt.minorticks_off()
ax.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())
plt.ylim([1000,200])
plt.yticks(h2p_w, height, fontsize=8)
plt.ylabel('Height (Km)', fontsize=8)
plt.text(0.99, 0.99, 'd', ha='right', va='top', transform=plt.gca().transAxes, fontweight='bold')

    #Wind speed trend 1950-2020#
ax5 = fig.add_subplot(3,2,5)
ax5.plot(x,y, color='gray', linewidth=1, alpha=0.5)
ax5.set_prop_cycle(color = colors, linestyle = linestyles)
ax5.axhline(line_850hpa, color='gray', linewidth=1, alpha=0.5)
for model in range(len(models)):
    ax5.plot(CMIP6_wrel_trend_JFM[0,model],ll_w)
ax5.plot(ERA5_wrel_trend_JFM,y, color='k', linestyle='-', linewidth=3)
ax5.plot([0.41708425, 0.17357783],[1000,925], color='k', linestyle='--', linewidth=2)
ax5.plot([0.17357783, -0.0699286 , -0.14349814],[925,850,775], color='gray', linestyle='--', linewidth=2, label='CMIP6\n(p>0.05)')
ax5.plot([-0.14349814, -0.21706768, -0.21201294, -0.06856824],[775,700,500,375], color='k', linestyle='--', linewidth=2, label='CMIP6\n(p<0.05)')
ax5.plot([-0.06856824,  0.07487646,  -0.01673919],[375,250,200], color='gray', linestyle='--', linewidth=2)
plt.ylim([1000,200])
plt.xlim([-1.5,3.5])
plt.yticks([1000,900,800,700,600,500,400,300,200],['10m', '900', '800', '700', '600', '500', '400', '300', '200'])
ax5.set_ylabel('Pressure levels (hPa)')
ax5.set_xlabel('Relative wind speed trend (% dec$^{-1}$)')
ax = ax5.twinx()
plt.minorticks_off()
ax.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())
plt.ylim([1000,200])
plt.yticks(h2p_w, [])
plt.text(0.99, 0.99, 'e', ha='right', va='top', transform=plt.gca().transAxes, fontweight='bold')

    #Wind speed mean 1950-2020#
axins = inset_axes(ax5, width="100%", height="100%", bbox_to_anchor=(.50, .34, .45, .60), bbox_transform=ax5.transAxes)
axins.set_prop_cycle(color = colors, linestyle = linestyles)
axins.axhline(line_850hpa, color='gray', linewidth=1, alpha=0.5)
for model in range(len(models)):
    axins.plot(CMIP6_wmean_JFM[model],ll_w)
axins.plot(ERA5_wmean_JFM,y, color='k', linestyle='-', linewidth=2)
plt.xlim([3,17])
plt.ylim([1000,200])
plt.yticks([1000,900,800,700,600,500,400,300,200],[])
axins.set_xlabel('Mean wind speed (m/s)', fontsize=6)
axins.set_xticks([4,6,8,10,12,14,16],[4,6,8,10,12,14,16], fontsize=6)
plt.text(0.98, 0.99, 'i', ha='right', va='top', transform=plt.gca().transAxes, fontweight='bold')
axins2 = axins.twinx()
axins2.minorticks_off()
axins2.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())
axins2.set_ylim([1000,200])
axins2.set_yticks(h2p_w, [])

    #Wind speed mean 1950-2100#
ax6 = fig.add_subplot(3,2,6)
ax6.plot(x,y, color='gray', linewidth=1, alpha=0.5)
ax6.set_prop_cycle(color = colors, linestyle = linestyles)
ax6.axhline(line_850hpa, color='gray', linewidth=1, alpha=0.5)
for model in range(len(models)):
    ax6.plot(CMIP6_wrel_trend_JFM[1,model],ll_w)
ax6.plot(ENS_wrel_trend_JFM[1,:4],ll_w[:4], color='k', linestyle='--', linewidth=2)
ax6.plot(ENS_wrel_trend_JFM[1,3:],ll_w[3:], color='gray', linestyle='--', linewidth=2)
ax6.plot([-0.63982479, -0.30261592],[500,375], color='k', linestyle='--', linewidth=2)
plt.ylim([1000,200])
plt.xlim([-1.5,3.5])
plt.yticks([1000,900,800,700,600,500,400,300,200],[])
ax6.set_xlabel('Relative wind speed trend (% dec$^{-1}$)')
ax = ax6.twinx()
plt.minorticks_off()
ax.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())
plt.ylim([1000,200])
plt.yticks(h2p_w, height, fontsize=8)
plt.ylabel('Height (Km)', fontsize=8)
plt.text(0.99, 0.99, 'f', ha='right', va='top', transform=plt.gca().transAxes, fontweight='bold')

plt.tight_layout()
plt.subplots_adjust(bottom=0.12)
fig.legend(loc='lower center', ncol=6)
fig.savefig('Figure2.pdf')


fig = plt.figure(figsize=(10,15))

    #Temperature trend 1950-2020#
ax1 = fig.add_subplot(3,2,1)
ax1.plot(x,y, color='gray', linewidth=1, alpha=0.5)
ax1.set_prop_cycle(color = colors, linestyle = linestyles)
ax1.axhline(line_850hpa, color='gray', linewidth=1, alpha=0.5)
for model in range(len(models)):
    ax1.plot(CMIP6_ttrend_JAS[0,model],ll_t)
ax1.plot(ERA5_ttrend_JAS,y, color='k', linestyle='-', linewidth=3)
ax1.plot(ENS_ttrend_JAS[0,:9],ll_t[:9], color='k', linewidth=2, linestyle='--')
ax1.plot(ENS_ttrend_JAS[0,8:],ll_t[8:], color='gray', linewidth=2, linestyle='--')
ax1.plot([0.1253543 , 0.03508654],[250,225], color='k', linewidth=2, linestyle='--')
plt.ylim([1000,200])
plt.xlim([-0.5,2.5])
plt.yticks([1000,900,800,700,600,500,400,300,200],['2m', '900', '800', '700', '600', '500', '400', '300', '200'])
ax1.set_ylabel('Pressure levels (hPa)')
ax1.set_xlabel('Temperature trend (K dec$^{-1}$)')
ax = ax1.twinx()
plt.minorticks_off()
ax.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())
plt.ylim([1000,200])
plt.yticks(h2p_s, [])
plt.title('1950-2020')
plt.text(0.99, 0.99, 'a', ha='right', va='top', transform=plt.gca().transAxes, fontweight='bold')

    #Temperature mean 1950-2020#
axins = inset_axes(ax1, width="100%", height="100%", bbox_to_anchor=(.50, .34, .45, .60), bbox_transform=ax1.transAxes)
axins.set_prop_cycle(color = colors, linestyle = linestyles)
axins.axhline(line_850hpa, color='gray', linewidth=1, alpha=0.5)
for model in range(len(models)):
    axins.plot(CMIP6_tmean_JAS[model],ll_t)
axins.plot(ERA5_tmean_JAS,y, color='k', linestyle='-', linewidth=2)
plt.xlim([200,280])
plt.ylim([1000,200])
plt.yticks([1000,900,800,700,600,500,400,300,200],[])
axins.set_xlabel('Mean temperature (K)', fontsize=6)
axins.set_xticks([200,210,220,230,240,250,260,270,280],[200,210,220,230,240,250,260,270,280], fontsize=6)
plt.text(0.98, 0.99, 'g', ha='right', va='top', transform=plt.gca().transAxes, fontweight='bold')
axins2 = axins.twinx()
axins2.minorticks_off()
axins2.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())
axins2.set_ylim([1000,200])
axins2.set_yticks(h2p_s, [])

    #Temperature trend 1950-2100#
ax2 = fig.add_subplot(3,2,2)
ax2.plot(x,y, color='gray', linewidth=1, alpha=0.5)
ax2.set_prop_cycle(color = colors, linestyle = linestyles)
ax2.axhline(line_850hpa, color='gray', linewidth=1, alpha=0.5)
for model in range(len(models)):
    ax2.plot(CMIP6_ttrend_JAS[1,model],ll_t)
ax2.plot(ENS_ttrend_JAS[1,:10],ll_t[:10], color='k', linewidth=2, linestyle='--')
plt.ylim([1000,200])
plt.xlim([-0.5,2.5])
plt.yticks([1000,900,800,700,600,500,400,300,200],[])
ax2.set_xlabel('Temperature trend (K dec$^{-1}$)')
ax = ax2.twinx()
plt.minorticks_off()
ax.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())
plt.ylim([1000,200])
plt.yticks(h2p_s, height, fontsize=8)
plt.ylabel('Height (Km)', fontsize=8)
plt.title('1950-2100')
plt.text(0.99, 0.99, 'b', ha='right', va='top', transform=plt.gca().transAxes, fontweight='bold')

    #Temperature gradient trend 1950-2020#
ax3 = fig.add_subplot(3,2,3)
ax3.plot(x,y, color='gray', linewidth=1, alpha=0.5)
ax3.set_prop_cycle(color = colors, linestyle = linestyles )
ax3.axhline(line_850hpa, color='gray', linewidth=1, alpha=0.5)
for model in range(len(models)):
    ax3.plot(CMIP6_gtrend_JAS[0,model],ll_t, label=models[model])
ax3.plot(ERA5_gtrend_JAS,y, color='k', linestyle='-', linewidth=3, label='ERA5')
ax3.plot([0.00152595, 0.00763052],[1000,962.5], color='gray', linewidth=2, linestyle='--')
ax3.plot([0.00763052, 0.01373509],[962.5,925], color='k', linewidth=2, linestyle='--')
ax3.plot(ENS_gtrend_JAS[0,1:5],ll_t[1:5], color='k', linewidth=2, linestyle='--')
ax3.plot([0.00283378, 0.00099433],[600,550], color='k', linewidth=2, linestyle='--')
ax3.plot([0.00099433, -0.00084513, -0.00888888],[550,500,450], color='gray', linewidth=2, linestyle='--')
ax3.plot(ENS_gtrend_JAS[0,6:],ll_t[6:], color='k', linewidth=2, linestyle='--')
ax3.plot([-0.00888888, -0.01693263],[450,400], color='k', linewidth=2, linestyle='--')
plt.ylim([1000,200])
plt.xlim([-0.7,0.13])
plt.yticks([1000,900,800,700,600,500,400,300,200],['2m', '900', '800', '700', '600', '500', '400', '300','200'])
ax3.set_ylabel('Pressure levels (hPa)')
ax3.set_xlabel('Temperature gradient trend (K/50hPa dec$^{-1}$)')
ax = ax3.twinx()
plt.minorticks_off()
ax.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())
plt.ylim([1000,200])
plt.yticks(h2p_s, [])
plt.text(0.99, 0.99, 'c', ha='right', va='top', transform=plt.gca().transAxes, fontweight='bold')

    #Temperature gradient mean 1950-2020#
axins = inset_axes(ax3, width="100%", height="100%", bbox_to_anchor=(.085, .34, .45, .60), bbox_transform=ax3.transAxes)
axins.plot(x,y, color='gray', linewidth=1, alpha=0.5)
axins.set_prop_cycle(color = colors, linestyle = linestyles)
axins.axhline(line_850hpa, color='gray', linewidth=1, alpha=0.5)
for model in range(len(models)):
    axins.plot(CMIP6_gmean_JAS[model],ll_t)
axins.plot(ERA5_gmean_JAS,y, color='k', linestyle='-', linewidth=2)
plt.xlim([-7,8])
plt.ylim([1000,200])
plt.yticks([1000,900,800,700,600,500,400,300,200],[])
axins.set_xlabel('Mean temperature gradient (K/50hPa)', fontsize=6)
axins.set_xticks([-6,-4,-2,0,2,4,6,8],[-6,-4,-2,0,2,4,6,8], fontsize=6)
plt.text(0.98, 0.99, 'h', ha='right', va='top', transform=plt.gca().transAxes, fontweight='bold')
axins2 = axins.twinx()
axins2.minorticks_off()
axins2.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())
axins2.set_ylim([1000,200])
axins2.set_yticks(h2p_s, [])

    #Temperature gradient trend 1950-2100#
ax4 = fig.add_subplot(3,2,4)
ax4.plot(x,y, color='gray', linewidth=1, alpha=0.5)
ax4.set_prop_cycle(color = colors, linestyle = linestyles)
ax4.axhline(line_850hpa, color='gray', linewidth=1, alpha=0.5)
for model in range(len(models)):
    ax4.plot(CMIP6_gtrend_JAS[1,model],ll_t)
ax4.plot(ENS_gtrend_JAS[1,:3],ll_t[:3], color='gray', linewidth=2, linestyle='--')
ax4.plot([0.00635103, 0.0040105],[850,775], color='gray', linewidth=2, linestyle='--')
ax4.plot([0.00522394, 0.00409686, 0.00612058, 0.0040105],[775,700,600,550], color='k', linewidth=2, linestyle='--')
ax4.plot([0.0040105, 0.00190042, -0.0117739 ],[550,500,450], color='gray', linewidth=2, linestyle='--', label='CMIP6\n(p>0.05)')
ax4.plot([-0.0117739, -0.02544822],[450,400], color='k', linewidth=2, linestyle='--')
ax4.plot(ENS_gtrend_JAS[1,6:],ll_t[6:], color='k', linewidth=2, linestyle='--', label='CMIP6\n(p<0.05)')
plt.ylim([1000,200])
plt.xlim([-0.7,0.13])
plt.yticks([1000,900,800,700,600,500,400,300,200],[])
ax4.set_xlabel('Temperature gradient trend (K/50hPa dec$^{-1}$)')
ax = ax4.twinx()
plt.minorticks_off()
ax.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())
plt.ylim([1000,200])
plt.yticks(h2p_s, height, fontsize=8)
plt.ylabel('Height (Km)', fontsize=8)
plt.text(0.99, 0.99, 'd', ha='right', va='top', transform=plt.gca().transAxes, fontweight='bold')

    #Wind speed trend 1950-2020#
ax5 = fig.add_subplot(3,2,5)
ax5.plot(x,y, color='gray', linewidth=1, alpha=0.5)
ax5.set_prop_cycle(color = colors, linestyle = linestyles)
ax5.axhline(line_850hpa, color='gray', linewidth=1, alpha=0.5)
for model in range(len(models)):
    ax5.plot(CMIP6_wrel_trend_JAS[0,model],ll_w)
ax5.plot(ERA5_wrel_trend_JAS,y, color='k', linestyle='-', linewidth=3)
ax5.plot(ENS_wrel_trend_JAS[0,:7],ll_w[:7], color='k', linewidth=2, linestyle='--')
plt.ylim([1000,200])
plt.xlim([-1,4])
plt.yticks([1000,900,800,700,600,500,400,300,200],['10m', '900', '800', '700', '600', '500', '400', '300', '200'])
ax5.set_ylabel('Pressure levels (hPa)')
ax5.set_xlabel('Relative wind speed trend (% dec$^{-1}$)')
ax = ax5.twinx()
plt.minorticks_off()
ax.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())
plt.ylim([1000,200])
plt.yticks(h2p_s, [])
plt.text(0.99, 0.99, 'e', ha='right', va='top', transform=plt.gca().transAxes, fontweight='bold')

    #Wind speed mean 1950-2020#
axins = inset_axes(ax5, width="100%", height="100%", bbox_to_anchor=(.50, .34, .45, .60), bbox_transform=ax5.transAxes)
axins.set_prop_cycle(color = colors, linestyle = linestyles)
axins.axhline(line_850hpa, color='gray', linewidth=1, alpha=0.5)
for model in range(len(models)):
    axins.plot(CMIP6_wmean_JAS[model],ll_w)
axins.plot(ERA5_wmean_JAS,y, color='k', linestyle='-', linewidth=2)
plt.xlim([2.5,17])
plt.ylim([1000,200])
plt.yticks([1000,900,800,700,600,500,400,300,200],[])
axins.set_xlabel('Mean wind speed (m/s)', fontsize=6)
axins.set_xticks([4,6,8,10,12,14,16],[4,6,8,10,12,14,16], fontsize=6)
plt.text(0.98, 0.99, 'i', ha='right', va='top', transform=plt.gca().transAxes, fontweight='bold')
axins2 = axins.twinx()
axins2.minorticks_off()
axins2.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())
axins2.set_ylim([1000,200])
axins2.set_yticks(h2p_s, [])

    #Wind speed trend 1950-2100#
ax6 = fig.add_subplot(3,2,6)
ax6.plot(x,y, color='gray', linewidth=1, alpha=0.5)
ax6.set_prop_cycle(color = colors, linestyle = linestyles)
ax6.axhline(line_850hpa, color='gray', linewidth=1, alpha=0.5)
for model in range(len(models)):
    ax6.plot(CMIP6_wrel_trend_JAS[1,model],ll_w)
ax6.plot(ENS_wrel_trend_JAS[1,:3],ll_w[:3], color='k', linewidth=2, linestyle='--')
ax6.plot([0.34148095, 0.22110699],[700,600], color='k', linewidth=2, linestyle='--')
ax6.plot([0.22110699, 0.10073303, 0.50466027],[600,500,375], color='gray', linewidth=2, linestyle='--')
ax6.plot([0.50466027, 0.90858752, 1.49496865],[375,250,100], color='k', linewidth=2, linestyle='--')
plt.ylim([1000,200])
plt.xlim([-1,4])
plt.yticks([1000,900,800,700,600,500,400,300,200],[])
ax6.set_xlabel('Relative wind speed trend (% dec$^{-1}$)')
ax = ax6.twinx()
plt.minorticks_off()
ax.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())
plt.ylim([1000,200])
plt.yticks(h2p_s, height, fontsize=8)
plt.ylabel('Height (Km)', fontsize=8)
plt.text(0.99, 0.99, 'f', ha='right', va='top', transform=plt.gca().transAxes, fontweight='bold')

plt.tight_layout()
plt.subplots_adjust(bottom=0.12)
fig.legend(loc='lower center', ncol=6)
fig.savefig('Suppl_Figure6.pdf')
